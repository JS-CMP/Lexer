#include "types/JsAny.hpp"
#include "global/global.hpp"
#include "types/objects/Types.hpp"
#include "customOperators/CustomOperators.hpp"

int main() {
    JS::Any Test262Error, $DONOTEVALUATE;
    Test262Error = JS::Any(JS::InternalObject::create<JS::Function>([&](const JS::Any &thisArg, const JS::Any &arguments) -> JS::Any {
        JS::Any message = arguments[u"0"];

        {
            thisArg[u"message"] = message || JS::Any(u"");
        }
        return JS::Any();
    }, 1, u"Test262Error"));
    Test262Error[u"prototype"][u"toString"] = JS::Any(JS::InternalObject::create<JS::Function>([&](const JS::Any &thisArg, const JS::Any &arguments) -> JS::Any {

        {
            return JS::Any(u"Test262Error: ") + thisArg[u"message"];
        }
        return JS::Any();
    }, 0, u"Anonymous"));
    Test262Error[u"thrower"] = JS::Any(JS::InternalObject::create<JS::Function>([&](const JS::Any &thisArg, const JS::Any &arguments) -> JS::Any {
        JS::Any message = arguments[u"0"];

        {
            throw NEW(Test262Error, message);
        }
        return JS::Any();
    }, 1, u"Anonymous"));
    $DONOTEVALUATE = JS::Any(JS::InternalObject::create<JS::Function>([&](const JS::Any &thisArg, const JS::Any &arguments) -> JS::Any {

        {
            throw JS::Any(u"Test262: This statement should not be evaluated.");
        }
        return JS::Any();
    }, 0, u"$DONOTEVALUATE"));
    return 0;
}
